// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using webapptesy.Data;

namespace webapptesy.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180829144244_daystable")]
    partial class daystable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("webapptesy.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("webapptesy.Models.Boat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("BoatName")
                        .IsRequired();

                    b.Property<string>("Category");

                    b.Property<string>("ContentDe");

                    b.Property<string>("ContentEn");

                    b.Property<string>("ContentHr");

                    b.Property<string>("ContentIt");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DescriptionDe");

                    b.Property<string>("DescriptionEn");

                    b.Property<string>("DescriptionHr");

                    b.Property<string>("DescriptionIt");

                    b.Property<string>("Fuel");

                    b.Property<string>("GoogleCalendarId");

                    b.Property<string>("Length");

                    b.Property<string>("Motor");

                    b.Property<int>("NrPersons");

                    b.Property<string>("Speed");

                    b.Property<string>("Water");

                    b.Property<string>("Weight");

                    b.Property<string>("Width");

                    b.HasKey("Id");

                    b.ToTable("Boats");
                });

            modelBuilder.Entity("webapptesy.Models.BoatCalendar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("AfternoonPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("BookDate")
                        .HasColumnType("Date");

                    b.Property<int>("CalendarBoatId");

                    b.Property<decimal>("FourteenDaysPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("FullDayPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("MorningPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("SevenDaysPrice")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("CalendarBoatId");

                    b.ToTable("BoatCalendars");
                });

            modelBuilder.Entity("webapptesy.Models.BoatImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CurrentBoatId");

                    b.Property<string>("ImageAltDe");

                    b.Property<string>("ImageAltEn");

                    b.Property<string>("ImageAltHr");

                    b.Property<string>("ImageAltIt");

                    b.Property<string>("ImageCaptionDe");

                    b.Property<string>("ImageCaptionEn");

                    b.Property<string>("ImageCaptionHr");

                    b.Property<string>("ImageCaptionIt");

                    b.Property<string>("ImageLgUrl");

                    b.Property<string>("ImageMdUrl");

                    b.Property<string>("ImageSmUrl");

                    b.Property<string>("ImageXlUrl");

                    b.Property<int>("Orderx");

                    b.Property<string>("OrigImage");

                    b.HasKey("Id");

                    b.HasIndex("CurrentBoatId");

                    b.ToTable("BoatImages");
                });

            modelBuilder.Entity("webapptesy.Models.BoatRenter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("BoatLicenseInfo");

                    b.Property<string>("City");

                    b.Property<string>("Company");

                    b.Property<string>("Country");

                    b.Property<string>("Email");

                    b.Property<string>("FullName");

                    b.Property<bool>("HaveBoatLicense");

                    b.Property<string>("Phone");

                    b.Property<string>("VatId");

                    b.HasKey("Id");

                    b.ToTable("BoatRenters");
                });

            modelBuilder.Entity("webapptesy.Models.DayWithInterest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AfternoonLocked");

                    b.Property<int>("CurrentProformaInvoiceRowId");

                    b.Property<bool>("MorningLocked");

                    b.HasKey("Id");

                    b.HasIndex("CurrentProformaInvoiceRowId")
                        .IsUnique();

                    b.ToTable("DaysWithInterest");
                });

            modelBuilder.Entity("webapptesy.Models.DayWithNoAvailability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AfternoonLocked");

                    b.Property<int>("CurrentInvoiceRowId");

                    b.Property<bool>("MorningLocked");

                    b.HasKey("Id");

                    b.HasIndex("CurrentInvoiceRowId")
                        .IsUnique();

                    b.ToTable("DaysWithNoAvailability");
                });

            modelBuilder.Entity("webapptesy.Models.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("InvoiceBoatRenterId");

                    b.Property<string>("InvoiceDescription");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceBoatRenterId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("webapptesy.Models.InvoiceRows", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("AfternoonPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("BookDate")
                        .HasColumnType("Date");

                    b.Property<int>("CalendarBoatId");

                    b.Property<int>("CurrentInvoiceId");

                    b.Property<decimal>("FourteenDaysPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("FullDayPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("InvoiceBoatName");

                    b.Property<decimal>("MorningPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("SevenDaysPrice")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("CurrentInvoiceId");

                    b.ToTable("InvoiceRows");
                });

            modelBuilder.Entity("webapptesy.Models.Owner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Owners");
                });

            modelBuilder.Entity("webapptesy.Models.OwnerAddress", b =>
                {
                    b.Property<int>("OwnerAddressId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<int>("AddressOfOwnerId");

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<string>("Email");

                    b.Property<string>("Phone1");

                    b.Property<string>("Phone2");

                    b.Property<string>("State");

                    b.HasKey("OwnerAddressId");

                    b.HasIndex("AddressOfOwnerId")
                        .IsUnique();

                    b.ToTable("OwnerAddresses");
                });

            modelBuilder.Entity("webapptesy.Models.ProformaInvoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ProformaInvoiceBoatRenterId");

                    b.Property<string>("ProformaInvoiceDescription");

                    b.HasKey("Id");

                    b.HasIndex("ProformaInvoiceBoatRenterId");

                    b.ToTable("ProformaInvoices");
                });

            modelBuilder.Entity("webapptesy.Models.ProformaInvoiceRows", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("AfternoonPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("BookDate")
                        .HasColumnType("Date");

                    b.Property<int>("CalendarBoatId");

                    b.Property<int>("CurrentProformaInvoiceId");

                    b.Property<decimal>("FourteenDaysPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("FullDayPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("MorningPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("ProformaInvoiceBoatName");

                    b.Property<decimal>("SevenDaysPrice")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("CurrentProformaInvoiceId");

                    b.ToTable("ProformaInvoiceRows");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("webapptesy.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("webapptesy.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("webapptesy.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("webapptesy.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("webapptesy.Models.BoatCalendar", b =>
                {
                    b.HasOne("webapptesy.Models.Boat", "Boat")
                        .WithMany("BoatCalendars")
                        .HasForeignKey("CalendarBoatId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("webapptesy.Models.BoatImage", b =>
                {
                    b.HasOne("webapptesy.Models.Boat", "Boat")
                        .WithMany("BoatImages")
                        .HasForeignKey("CurrentBoatId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("webapptesy.Models.DayWithInterest", b =>
                {
                    b.HasOne("webapptesy.Models.ProformaInvoiceRows", "ProformaInvoiceRows")
                        .WithOne("DayWithInterest")
                        .HasForeignKey("webapptesy.Models.DayWithInterest", "CurrentProformaInvoiceRowId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("webapptesy.Models.DayWithNoAvailability", b =>
                {
                    b.HasOne("webapptesy.Models.InvoiceRows", "InvoiceRows")
                        .WithOne("DayWithNoAvailability")
                        .HasForeignKey("webapptesy.Models.DayWithNoAvailability", "CurrentInvoiceRowId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("webapptesy.Models.Invoice", b =>
                {
                    b.HasOne("webapptesy.Models.BoatRenter", "BoatRenter")
                        .WithMany("Invoices")
                        .HasForeignKey("InvoiceBoatRenterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("webapptesy.Models.InvoiceRows", b =>
                {
                    b.HasOne("webapptesy.Models.Invoice", "Invoice")
                        .WithMany("AllInvoiceRows")
                        .HasForeignKey("CurrentInvoiceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("webapptesy.Models.OwnerAddress", b =>
                {
                    b.HasOne("webapptesy.Models.Owner", "Owner")
                        .WithOne("Address")
                        .HasForeignKey("webapptesy.Models.OwnerAddress", "AddressOfOwnerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("webapptesy.Models.ProformaInvoice", b =>
                {
                    b.HasOne("webapptesy.Models.BoatRenter", "BoatRenter")
                        .WithMany("ProformaInvoices")
                        .HasForeignKey("ProformaInvoiceBoatRenterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("webapptesy.Models.ProformaInvoiceRows", b =>
                {
                    b.HasOne("webapptesy.Models.ProformaInvoice", "ProformaInvoice")
                        .WithMany("AllProformaInvoiceRows")
                        .HasForeignKey("CurrentProformaInvoiceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
